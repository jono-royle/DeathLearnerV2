// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Linq;
using DeathLearnV2ML.Model;
using Microsoft.ML;

namespace DeathLearnV2ML.ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            if (!args.Any())
            {
                do
                {
                    string input = Console.ReadLine();
                    string[] inputArgs = input.Split(' ');

                    ModelInput modelInput = new ModelInput()
                    {
                        PlayerX = float.Parse(inputArgs[0]),
                        PlayerY = float.Parse(inputArgs[1]),
                        EnemyX = float.Parse(inputArgs[2]),
                        EnemyY = float.Parse(inputArgs[3]),
                        EnemyVelocityX = float.Parse(inputArgs[4]),
                        EnemyVelocityY = float.Parse(inputArgs[5]),
                    };

                    var predictionResult = Predict(modelInput);

                    Console.WriteLine(predictionResult.Prediction);

                } while (true);
            }
            else
            {
                Console.WriteLine("Building Model");
                ModelBuilder.CreateModel();
            }
        }

        private static Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictionEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(CreatePredictionEngine);

        // For more info on consuming ML.NET models, visit https://aka.ms/mlnet-consume
        // Method for consuming model in your app
        public static ModelOutput Predict(ModelInput input)
        {
            ModelOutput result = PredictionEngine.Value.Predict(input);
            return result;
        }

        public static PredictionEngine<ModelInput, ModelOutput> CreatePredictionEngine()
        {
            // Create new MLContext
            MLContext mlContext = new MLContext();

            // Load model & create prediction engine
            string modelPath = @"C:\Users\monoj\ProgrammingProjects\DeathLearnV2\MLModel.zip";
            ITransformer mlModel = mlContext.Model.Load(modelPath, out var modelInputSchema);
            var predEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);

            return predEngine;
        }
    }
}
